top_dest
semi_join(flights, top_dest) # only keep rows that join with row in top_dest
semi_join(flights, top_dest) # only keep rows that join with row in top_dest
anti_join(flights, top_dest) # only keep rows that DO NOT join with row in top dest
x <- sample(13, 100, rep=T)
x
x_factor <- factor(letters[x*2])
x_factor
typeof(x_factor) # integer
class(x_factor) # factor
str(attributes(x_factor)) # levels
table(x_factor) # summarize factor
x_factor[c(3,7), drop = TRUE] # wegwerfen der anderen level
typeof(mean)
typeof(sum)
typeof(`[`)
class(sum)
class(mean)
class(`[`)
str_length(c("a", "abs", NA, ""))
str_c("prefix", LETTERS[sample(26, 3, rep=T)], "suffix", # vektorisiert in allen args
sep = "-",
collapse = " * ")
x <- "Fritz Walter   ist   toll.   "
str_sub(x, start=3, end=5)
str_sub(x, end=-5) # only drop last 4 chars
str_sub(x, start=7, end=12) <- "Hasl"
x
str_trim(x) # remove whitespace in beginning and end
str_squish(x) # remove repeated whitespace inside
str_to_upper(x)
str_to_lower(x)
str_to_title(x)
str_dup(c("a", "bB"), 2:5)
str_glue("3 * pi = {format(3*pi, digits=3)} und das ist {'{toll}'}, weil {x}.") # auch vektorisiert
str_glue_data(tibble(x=1:3, y=letters[1:3]), "Es ist x={x} <-> y={y}")
str_detect(x, "[aeiou]") # alles vektorisiert
str_subset(letters, "[aeiou]") # recycling
str_which(letters, "[aeiou]")
str_count(letters, letters[1:13])
str_extract(c(x, "Stopp"), ".t")
str_extract_all(c(x, "Stopp"), ".t")
str_locate(c(x, "Stopp"), ".t")
str_locate_all(c(x, "Stopp"), ".t")
str_split(c("Kaffee,Klettern_Sport.Wald", "Bla.Furz"), "[,_\\.]")
str_split("Fritz.kann.kochen", fixed(".K", ignore_case=T))
str_match("Fritz.kann.kochen", "(.)\\.(.)") # gibt gruppen aus
str_match_all("Fritz.kann.kochen", "(.)\\.(.)")
str_replace("Fritz.kann.kochen", "(.)\\.(.)", "\\2$\\1") # use \1.. in replacement to access groups
str_replace_all("Fritz.kann.kochen", "(.)\\.(.)", "\\2$\\1")
e1 <- env(a = FALSE, b = "a", c = 2.3, d = 1:3)
library(rlang)
e1 <- env(a = FALSE, b = "a", c = 2.3, d = 1:3)
c(class(e1), typeof(e1), length(e1))
.Person <- setClass("Person", slots = c(name = "character", age = "numeric"))
.Employee <- setClass("Employee", contains = "Person", slots = c(boss = "Person"))
Person <- function(name, age) {
stopifnot(length(name) == 1 && length(age))
.Person(name = name, age = age)
}
Employee <- function(name, age, boss) {
p <- Person(name = name, age = age)
.Employee(p, boss = boss)
}
tyrion <- Person(name = "Tyrion", age = 42)
peter <- Employee(name = "Peter", age = 13, boss = tyrion)
tyrion@age <- tyrion@age + 1
tyrion@name <- 42
slotNames(tyrion)
is(tyrion)
is(peter, "Person")
typeof(tyrion)
class(tyrion)
setGeneric("laugh", function(x) standardGeneric("laugh"))
setGeneric("laugh", function(x) standardGeneric("laugh"))
setMethod("laugh", "Person", function(x) {
cat(str_glue("{x@name} laughs out loudly."), "\n")
})
setMethod("laugh", "Employee", function(x) {
cat(str_glue("{x@name} laughs out shyly."), "\n")
})
formals(getGeneric("show"))
setMethod("show", "Person", function(object) {
cat(str_glue("{object@name} ({object@age})"), "\n")
})
setMethod("show", "Employee", function(object) {
cat(str_glue("{object@name} ({object@age}) an Employee"), "\n")
})
setGeneric("name", function(x) standardGeneric("name"))
setMethod("name", "Person", function(x) x@name)
setGeneric("name<-", function(x, value) standardGeneric("name<-"))
setMethod("name<-", "Person", function(x, value) {
x@name <- value
x
})
as(peter, "Person") # default
emp <- as(tyrion, "Employee") # default
emp@boss
emp@boss
setAs("Person", "Employee", function(from) {
stop("Can not coerce a Person to an Employee")
})
s4_methods_generic("laugh")
s4_methods_class("Person")
RangedNumeric <- setClass(
"RangedNumeric",
contains = "numeric",
slots = c(min = "numeric", max = "numeric")
)
rn <- RangedNumeric(1:10, min=1, max=10)
rn@.Data # access underlying S3 or implicite class
x <- expr(3+5*y)
y <- 12
eval(x)
str(exprs(name = 1+2, f(x), sin(42)))
typeof(expr(1))
c(typeof(expr(variable)), class(expr(variable))) # symbol name
c(typeof(expr(sin(x))), class(expr(sin(x)))) # language call
lobstr::ast(f(g(x, h(), 1), x))
a <- expr(f(g(x, h(), 1), x))
str(as.list(a))
a[[2]][[3]][[1]]
a[[c(2,3,1)]] <- expr(q)
expr_text(a)
identical(parse_expr("f(g(x, q(), 1), x)"), a)
parse_exprs("x <- 4\nprint(x+5)") # parse multiple expressions as expr list
f <- function(x, ...) {
print(enexpr(x)) # does not use promise
force(x)
print(enexpr(x))
enexprs(...)
}
f(3+4, sin(pi), 0/0)
x <- y <- 3
eval(expr(x+y), envir = env(`+` = `-`))
f <- function() {
x <- 10
quo(1+x)
}
x <- 100
q <- f()
eval(quo_get_expr(q)) # evaluates in current environment
eval_tidy(q) # evaluates in captured environment
expr_text(quo(1+2)) # prints weird ~ in front
quo_text(quo(1+2))
foo <- function(x, y) {
z <- 1
x <- enexpr(x)
y <- enquo(y)
c(eval(x), eval_tidy(y))
}
z <- 100
foo(z*2, z*2) # 2 200 (x is evaluated in execution env of foo, y is evaluated in global env)
eval_tidy(expr(a <- 42)) # does not actually assign
eval(expr(a <- 42)) # does assign
x <- 1
eval_tidy(quo(x+y), list(y = 100))
a <- expr(f(x))
expr(1 + !!a) # Bang-Bang Operator
lobstr::ast(expr(f(x)))
lobstr::ast(!!expr(f(x)))
### big bang
x <- 1:3
str(exprs(!!x))
str(exprs(!!!x)) # big bang
### walrus
name <- "asdf"
tibble(!!name := 1:5)
y <- 4
tb <- tibble(x = 1:3, y=3:1)
eval_tidy(quo(.data$y + .env$y*10), tb) # .data datamask, .env environment
x <- 1
lobstr::ast(7 + !!(x+2))
lobstr::ast(7 + !!quo(x+2)) # unwraps quosure and puts it in main quosure
y <- 1
create_q <- function() {
y <- 10
quo(y)
}
qu <- create_q()
eval_tidy(quo(y + !!qu))
var <- quo(y)
tb <- tibble(x=1:5, y = 5:1)
eval_tidy(quo(!!var == 4), tb)
var <- "y"
eval_tidy(quo(.data[[var]] == 4), tb)
mysummarise <- function(tb, mean_var, ...) {
qg <- enquos(...)
qm <- enquo(mean_var)
mean_name <- str_glue("mean_{quo_name(qm)}")
tb %>%
group_by(!!!qg) %>%
summarise(!!mean_name := mean(!!qm))
}
filterx <- function(var) {
filter2(tb, {{var}} == 1)
}
source2 <- function(path) {
l <- readLines(path)
exs <- lapply(l, parse_expr)
model <- env(base_env())
for (ex in exs)
res <- eval_tidy(ex, model)
res
}
source2("test.R")
namedlist <- function(...) {
qs <- enquos(...)
l <- list(...)
names(l) <- lapply(qs, quo_text)
l
}
namedlist(letters, 1:10)
filter2 <- function(tb, ex) {
ex <- enquo(ex)
tb[eval_tidy(ex, tb), ]
}
m <- outer(1:5, 1:4, paste, sep=",")
m
cumsum(1:10)
m <- outer(1:5, 1:4, paste, sep=",")
m[2:7] # indizierung auf zugrundeliegendem vektor
?outer
?&
TRUE && TRUE
c(TRUE, FALSE) && c(TRUE, TRUE)
c(TRUE, FALSE) & c(TRUE, TRUE)
foo <- function(...) {
if (all(is.numeric(...)) && all(sapply(..., length) == 1)) {
df <- data.frame(x = ..., sin_x = sin(...))
return(df)
}
}
foo(0, pi, 2pi)
foo(0, pi, 2*pi)
foo <- function(...) {
if (all(sapply(..., is.numeric)) && all(sapply(..., length) == 1)) {
df <- data.frame(x = ..., sin_x = sin(...))
return(df)
}
}
foo(0, pi, 2*pi)
foo(0, pi, 2 * pi)
test <- function(...) list(...)
test(0, pi)
if (all(sapply(list(...), is.numeric)) && all(sapply(list(...), length) == 1)) {
df <- data.frame(x = ..., sin_x = sin(...))
return(df)
}
foo <- function(...) {
args <- list(...)
if (all(sapply(args, is.numeric)) && all(sapply(args, length) == 1)) {
df <- data.frame(x = ..., sin_x = sin(...))
return(df)
}
}
foo(0, pi, 2*pi)
sin(c(0,2,3))
?as.vector
foo <- function(...) {
args <- list(...)
if (all(sapply(args, is.numeric)) && all(sapply(args, length) == 1)) {
df <- data.frame(x = ..., sin_x = sin(as.vector(...)))
return(df)
}
}
foo(0, pi, 2*pi)
if (all(sapply(args, is.numeric)) && all(sapply(args, length) == 1)) {
df <- data.frame(x = args, sin_x = sin(args))
return(df)
}
foo(0, pi, 2*pi)
foo <- function(...) {
args <- list(...)
if (all(sapply(args, is.numeric)) && all(sapply(args, length) == 1)) {
df <- data.frame(x = args, sin_x = sin(args))
return(df)
}
}
foo(0, pi, 2*pi)
print(args)
foo <- function(...) {
args <- list(...)
print(args)
if (all(sapply(args, is.numeric)) && all(sapply(args, length) == 1)) {
df <- data.frame(x = args, sin_x = sin(args))
return(df)
}
}
foo(0, pi, 2*pi)
args <- list(0, pi, 2*pi)
args
sin(args)
sin(as.vector(args))
typeof(args)
as.vector(args)
typeof(as.vector(args))
foo <- function(...) {
args <- list(...)
print(args)
if (all(sapply(args, is.numeric)) && all(sapply(args, length) == 1)) {
df <- data.frame(x = args, sin_x = sin(c(...)))
return(df)
}
}
foo(0, pi, 2*pi)
foo <- function(...) {
args <- list(...)
print(args)
if (all(sapply(args, is.numeric)) && all(sapply(args, length) == 1)) {
df <- data.frame(x = c(...), sin_x = sin(c(...)))
return(df)
}
}
foo(0, pi, 2*pi)
env_global()
global_env()
foo <- function() {
caller_env() == global_env()
}
foo()
foo <- function() {
caller_env() == global_env()
}
foo <- function() {
env_label(caller_env()) == env_label(global_env())
}
foo()
fun <- function() foo()
fun()
library(rlang)
#iv
foo <- function(string, x) {
eval(!!string(x))
}
foo(sin, 2)
foo(sum, c(2,3))
#iv
foo <- function(string, x) {
eval(!!string(x))
}
foo(sum, c(2,3))
foo
foo('sum', c(2,3))
#iv
foo <- function(string, x) {
a <- expr(!!string(x))
print(a)
eval(a)
}
foo('sum', c(2,3))
#iv
foo <- function(string, x) {
a <- expr(string)
eval(do.call(!!a, x))
}
foo('sum', c(2,3))
#iv
foo <- function(string, x) {
a <- expr(string)
eval(do.call(!!a, list(x)))
}
foo('sum', c(2,3))
#iv
foo <- function(string, x) {
a <- expr(string)
eval(!!a(x))
}
foo('sum', c(2,3))
#iv
foo <- function(string, x) {
a <- expr(string)
total <- expr(!!a(x))
print(total)
eval(total)
}
foo('sum', c(2,3))
#iv
foo <- function(string, x) {
a <- expr(string)
total <- expr(!!a (x))
print(total)
eval(total)
}
foo('sum', c(2,3))
#iv
foo <- function(string, x) {
a <- expr(string)
total <- expr(do.call(!!a, list(x)))
print(total)
eval(total)
}
foo('sum', c(2,3))
?str_match
#vi
batman <- function(na) {
str_match(na, "(Na){14}")
}
nanana <- "Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na"
batman(nanana)
#vi
batman <- function(na) {
str_match(na, "(Na ){14}")
}
batman(nanana)
nana <- "Na Na Na Na Na Na Na Na Na"
batman(nanana)
batman(nana)
#vi
batman <- function(na) {
is.na(str_match(na, "(Na ){14}"))
}
batman(nana)
batman(nanana)
#vi
batman <- function(na) {
str_replace(na, "(Na ){14}", "\\1 Batman")
}
batman(nanana)
#vi
batman <- function(na) {
str_replace(na, "(Na ){14}", "\\1\\2 Batman")
}
batman(nanana)
#vi
batman <- function(na) {
str_replace(na, "(Na Na Na Na Na Na Na Na Na Na Na Na Na Na)", "\\1 Batman")
}
batman(nanana)
batman(nana)
proj <- tibble(
topics = c("Statistics, Probability"),
member1 = c("Ferdinand", "Claudia"),
member2 = c("Boris", "Damian"),
member3 = c("Elsa", "Anna")
)
proj %>% pivot_longer(names_to = member, values_to = student)
proj %>% pivot_longer(cols = member1:member3, names_to = member, values_to = student)
proj %>% pivot_longer(cols = member1:member3, names_to = "member", values_to = student)
proj %>% pivot_longer(cols = member1:member3, names_to = "member", values_to = "student")
proj
proj <- tibble(
topics = c("Statistics", "Probability"),
member1 = c("Ferdinand", "Claudia"),
member2 = c("Boris", "Damian"),
member3 = c("Elsa", "Anna")
)
proj %>% pivot_longer(cols = member1:member3, names_to = "member", values_to = "student")
simplify <- function(proj) {
proj %>%
pivot_longer(cols=member1:member3, names_to="member", values_to="student") %>%
select(student, topics)
}
simplify(proj)
foo <- function(lst) {
names(list) %>% unique() %>% length() -> diff
diff < length(lst)
}
foo(list(a = 2, b = 3))
names(list(a = 2, b=3))
names(list(a = 2, b=3)) %>% unique()
names(list(a = 2, b=3)) %>% unique() %>% length()
length(lst)
foo <- function(lst) {
names(list) %>% unique() %>% length() -> diff
print(diff)
diff < length(lst)
}
foo(list(a = 2, b = 3))
foo <- function(lst) {
names(lst) %>% unique() %>% length() -> diff
print(diff)
diff < length(lst)
}
foo(list(a = 2, b = 3))
foo <- function(lst) {
names(lst) %>% unique() %>% length() -> diff
diff < length(lst)
}
foo(list(a = 2, b = 3))
foo(list(a = 2, a = 3, c = 4))
A = matrix(c(2, 1, 1, 2), ncol = 2)
A[1:i, 1:i]
i <- 1
A[1:i, 1:i]
i <- 2
A[1:i, 1:i]
det(A[1:i, 1:i])
i <- 2
det(A[1:i, 1:i])
i <- 1
det(A[1:i, 1:i])
?pnorm
?norm
?rnorm
unclass(list(1, 2))
?unclass
TRUE && stop(!)
TRUE && stop("!")
TRUE & stop("!")
TRUE || stop("!")
TRUE | stop("!")
A <- array(runif(2 * 2 * 32), c(2, 2, 32))
apply(A, 3, det)
apply(A, 1, det)
apply(A, 2, det)
foo <- function(a, b, c) {
expr(!!a * sin(!!b * (x - !!c)))
}
foo(1,2,3)
library(lobstr)
ast(0 + sin(6)/7)
